#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
  int id;
  char label;
  struct Node* neighbors[4]; // 0 = up, 1 = down, 2 = right, 3 = left   
} Node;

Node* createNode(int id, char label) {
  Node* node = malloc(sizeof(Node));
  node->id = id;
  node->label = label;
  for (int i = 0; i < 4; i++) {
    node->neighbors[i] = NULL;
  }
  return node;
}

void connectNodes(Node* node1, Node* node2, int direction) {
  if (direction < 0 || direction >= 4) {
    printf("Invalid direction for connecting nodes.\n");
    return;
  }
  node1->neighbors[direction] = node2;
}

void printGraph(Node* node) {
  if (node == NULL) {
    return;
  }
  printf("%d (%c): ", node->id, node->label);
  for (int i = 0; i < 4; i++) {
    if (node->neighbors[i] != NULL) {
      printf("%d,", node->neighbors[i]->id);
    } else {
      printf("X,");
    }
  }
  printf("\n");
  for (int i = 0; i < 4; i++) {
    printGraph(node->neighbors[i]);
  }
}

int main() {
  Node* n1 = createNode(1, 'A');
  Node* n2 = createNode(2, 'B');
  Node* n3 = createNode(3, 'C');
  Node* n4 = createNode(4, 'D');
  Node* n5 = createNode(5, 'E');
  Node* n6 = createNode(6, 'F');
  Node* n7 = createNode(7, 'G');
  Node* n8 = createNode(8, 'H');
  Node* n9 = createNode(9, 'I');
  Node* n10 = createNode(10, 'J');
  Node* n11 = createNode(11, 'K');
  Node* n12 = createNode(12, 'L');
  Node* n13 = createNode(13, 'M');
  Node* n14 = createNode(14, 'N');
  Node* n15 = createNode(15, 'O');
  Node* n16 = createNode(16, 'P');
  Node* n17 = createNode(17, 'Q');
  Node* n18 = createNode(18, 'R');
  Node* n19 = createNode(19, 'S');
  Node* n20 = createNode(20, 'T');
  Node* n21 = createNode(21, 'U');
  Node* n22 = createNode(22, 'V');
  Node* n23 = createNode(23, 'W');
  Node* n24 = createNode(24, 'X');
  Node* n25 = createNode(25, 'Y');
  Node* n26 = createNode(26, 'Z');
  Node* n27 = createNode(27, '1');
  Node* n28 = createNode(28, '2');
  Node* n29 = createNode(29, '3');

  connectNodes(n1, n2, 0); // Up
  connectNodes(n1, n4, 1); // Down
  connectNodes(n2, n3, 0); // Up
  connectNodes(n4, n5, 1); // Down
  connectNodes(n5, n6, 0); // Up
  connectNodes(n6, n7, 1); // Down
  connectNodes(n7, n8, 2); // Right
  connectNodes(n8, n9, 0); // Up
  connectNodes(n9, n10, 1); // Down
  connectNodes(n10, n11, 1); // Down
  connectNodes(n11, n12, 1); // Down
  connectNodes(n11, n13, 2); // Right
  connectNodes(n12, n14, 1); // Down
  connectNodes(n13, n15, 1); // Down
  connectNodes(n14, n16, 1); // Down
  connectNodes(n15, n17, 1); // Down
  connectNodes(n16, n17, 2); // Right
  connectNodes(n16, n18, 0); // Up
  connectNodes(n17, n19, 1); // Down
  connectNodes(n18, n19, 2); // Right
  connectNodes(n19, n20, 1); // Down
  connectNodes(n20, n21, 1); // Down
  connectNodes(n20, n22, 2); // Right
  connectNodes(n21, n23, 1); // Down
  connectNodes(n22, n24, 1); // Down
  connectNodes(n23, n25, 1); // Down
  connectNodes(n24, n25, 2); // Right
  connectNodes(n24, n26, 0); // Up
  connectNodes(n25, n27, 1); // Down
  connectNodes(n26, n27, 2); // Right
  connectNodes(n27, n28, 1); // Down
  connectNodes(n28, n29, 1); // Down

   printGraph(n1);

   return 0;
}